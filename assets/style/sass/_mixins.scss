/* ! MEDIA QUERIES */

@mixin border-radius($radius: 10px) {
  border-radius: $radius;
  -moz-border-radius: $radius;
  -webkit-border-radius: $radius;
}
@mixin gradient($from, $to) {
   background-color: $from; 
   background-image: -webkit-gradient(linear, 0% 0%, 0% 100%, from($from), to($to));
   background-image: -webkit-linear-gradient(top, $from, $to); 
   background-image: -moz-linear-gradient(top, $from, $to);
   background-image: -ms-linear-gradient(top, $from, $to);
   background-image: -o-linear-gradient(top, $from, $to);
}
@mixin box-shadow($horizontal, $vertical, $blur, $size, $color, $type: null) {
	-webkit-box-shadow: $type $horizontal $vertical $blur $size $color;
	-moz-box-shadow: $type $horizontal $vertical $blur $size $color;
	box-shadow: $type $horizontal $vertical $blur $size $color;
}
@mixin text-shadow($horizontal, $vertical, $blur, $color) {
     text-shadow: $horizontal $vertical $blur $color !important;
}
@mixin rotate($degree){
	-webkit-transform: rotate($degree + deg);
	-moz-transform: rotate($degree + deg);
	-o-transform: rotate($degree + deg);
	-ms-transform: rotate($degree + deg);
	transform: rotate($degree + deg);
}
@mixin animate($type, $duration, $timing){
	-webkit-transition: $type $duration $timing;
	-moz-transition: $type $duration $timing;
	-ms-transition: $type $duration $timing;
	-o-transition: $type $duration $timing;
	transition: $type $duration $timing;
}
@mixin clearfix(){
	zoom: 1;
	&:before, &:after { content: "\0020"; display: block; height: 0; overflow: hidden; }  
	&:after { clear: both; }  
}

/* BUTTONS */
@mixin btnStructure($padding: 1.2em, $width: auto, $fontSize: 1.2em, $borderRadius: 3px)
{
	display: block;
	margin: 0;
	padding: $padding;
	width: $width;
	text-align: center;
	font-size: $fontSize;
	cursor: pointer;
	@include border-radius($borderRadius);
}
@mixin btnColors($mainColor, $fontColor: $colorLight)
{
	border: 1px solid darken($mainColor, 6%);
	color: $fontColor;
	@include gradient($mainColor, darken($mainColor, 7%));
	@include box-shadow(1px, 1px, 1px, 0, lighten($mainColor, 20%), inset);
	@include text-shadow(0, -1px, 0, rgba(0, 0, 0, 0.09));
	@include border-radius(3px);
	&:hover {
		$increment : 5;
		@include gradient(darken($mainColor, $increment + 0%), darken($mainColor, ($increment + 10%)));
		@include box-shadow(1px, 1px, 1px, 0, $mainColor, inset);
		border: 1px solid darken($mainColor, 9%);
		color: $fontColor;
	}
}

@mixin hideText(){
	display: block;
	overflow: hidden;
	text-indent: -99999px; 
}

/* RESPONSIVE */
@mixin respond-to($media) {
	/* 
		mobile
		tablet
		mobile-portrait
		mobile-landscape 
		tablet-portrait
		tablet-landscape
		desktop
	*/
	@if $media == mobile { // smartphone mobile devices
		@media only screen and (max-width: $mediaMobilePortrait) { @content; }
		@media only screen and (min-width: $mediaMobilePortrait+1) and (max-width : $mediaMobileLandscape) { @content; }
	}@else if $media == tablet { // tablet devices
		@media only screen and (min-width : $mediaMobileLandscape+1) and (max-width : $mediaTabletPortrait) { @content; }
		@media only screen and (min-width: $mediaTabletPortrait+1) and (max-width : $mediaTabletLandscape) { @content; }
	}@else if $media == mobile-portrait { // smartphone portrait
		@media only screen and (max-width: $mediaMobilePortrait) { @content; }
	}@else if $media == mobile-landscape { // smartphone landscape
		@media only screen and (min-width: $mediaMobilePortrait+1) and (max-width : $mediaMobileLandscape) { @content; }
	}@else if $media == tablet-portrait { // tablet portrait
		@media only screen and (min-width : $mediaMobileLandscape+1) and (max-width : $mediaTabletPortrait) { @content; }
	}@else if $media == tablet-landscape { // tablet landscapt
		@media only screen and (min-width: $mediaTabletPortrait+1) and (max-width : $mediaTabletLandscape) { @content; }
	}@else if $media == desktop { // desctop
		@media only screen and (min-width: $mediaDesktop+1) { @content; }
	}
}