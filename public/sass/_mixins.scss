// box stuff
@mixin box-size()
{
	-webkit-box-sizing: border-box; /* Safari/Chrome, other WebKit */
    -moz-box-sizing: border-box;    /* Firefox, other Gecko */
    box-sizing: border-box; 
}
@mixin border-radius($radius: 10px) 
{
  border-radius: $radius;
  -moz-border-radius: $radius;
  -webkit-border-radius: $radius;
}
@mixin box-shadow($horizontal, $vertical, $blur, $size, $color, $type: null) 
{
	-webkit-box-shadow: $type $horizontal $vertical $blur $size $color;
	-moz-box-shadow: $type $horizontal $vertical $blur $size $color;
	box-shadow: $type $horizontal $vertical $blur $size $color;
}
@mixin box-emboss($opacity: .8, $opacity2: .2)
{
    box-shadow: rgba(255,255,255,$opacity) 1px 1px 0, inset rgba(0,0,0,$opacity2) 1px 1px 3px;
}
@mixin rotate($degree)
{
	-webkit-transform: rotate($degree + deg);
	-moz-transform: rotate($degree + deg);
	-o-transform: rotate($degree + deg);
	-ms-transform: rotate($degree + deg);
	transform: rotate($degree + deg);
}
@mixin translate3d($x, $y, $z) {
	transform: translate3d($x, $y, $z);
	-webkit-transform: translate3d($x, $y, $z);			
}
@mixin clearfix()
{
	zoom: 1;
	&:before, &:after { content: "\0020"; display: block; height: 0; overflow: hidden; }  
	&:after { clear: both; }  
}

// text stuff
@mixin text-shadow($horizontal, $vertical, $blur, $color) 
{
    text-shadow: $horizontal $vertical $blur $color !important;
}
@mixin text-emboss($opacity: .9, $opacity2: .9)
{
	text-shadow: rgba(255,255,255,$opacity) 1px 1px 0, inset rgba(0,0,0,$opacity2) 1px 1px 0;
}
@mixin letterpress($opacity)
{
    text-shadow:white($opacity) 0 1px 0;
}
@mixin hideText()
{
	display: block;
	overflow: hidden;
	text-indent: -99999px; 
}

// color stuff
@mixin gradient($from, $to, $direction: top)
{
   background-color: $from; 
   background-image: -webkit-gradient(linear, $direction 0%, $direction 100%, from($from), to($to));
   background-image: -webkit-linear-gradient($direction, $from, $to); 
   background-image: -moz-linear-gradient($direction, $from, $to);
   background-image: -ms-linear-gradient($direction, $from, $to);
   background-image: -o-linear-gradient($direction, $from, $to);
}

// movement stuff
@mixin animate($type, $duration, $timing)
{
	-webkit-transition: $type $duration $timing;
	-moz-transition: $type $duration $timing;
	-ms-transition: $type $duration $timing;
	-o-transition: $type $duration $timing;
	transition: $type $duration $timing;
}

// button stuff
@mixin btnStructure($padding: 1.2em, $width: auto, $fontSize: 1.2em, $borderRadius: 3px)
{
	display: block;
	margin: 0;
	padding: $padding;
	width: $width;
	text-align: center;
	font-size: $fontSize;
	cursor: pointer;
	@include border-radius($borderRadius);
}
@mixin btnColors($mainColor, $fontColor: $colorLight)
{
	border: 1px solid darken($mainColor, 6%);
	color: $fontColor;
	@include gradient($mainColor, darken($mainColor, 7%));
	// @include box-shadow(1px, 1px, 1px, 0, lighten($mainColor, 10%), inset);
	@include box-shadow(1px, 1px, 1px, 0, lighten($mainColor, 8%), inset);
	@include text-shadow(0, 0, 1px, rgba(0, 0, 0, 0.3));
	@include border-radius(3px);
	&:hover {
		$increment : 5;
		@include gradient(darken($mainColor, $increment + 0%), darken($mainColor, ($increment + 10%)));
		@include box-shadow(1px, 1px, 1px, 0, $mainColor, inset);
		border: 1px solid darken($mainColor, 9%);
		color: $fontColor;
	}
}

// media queries.  responsive stuff.
@mixin respond-to($media) 
{
	// mobile
	// tablet
	// mobile-portrait
	// mobile-landscape 
	// tablet-portrait
	// tablet-landscape
	// desktop
	@if $media == mobile  // mobile (all orientations)
	{
		@media only screen and (max-width: $mediaMobilePortrait) { @content; }
		@media only screen and (min-width: $mediaMobilePortrait+1) and (max-width : $mediaMobileLandscape) { @content; }
	}
	@else if $media == tablet // tablets (all orientations)
	{ 
		@media only screen and (min-width : $mediaMobileLandscape+1) and (max-width : $mediaTabletLandscape) { @content; }
	}
	@else if $media == mobile-portrait // mobile portrait
	{ 
		@media only screen and (max-width: $mediaMobilePortrait) { @content; }
	}
	@else if $media == mobile-landscape // mobile landscape
	{ 
		@media only screen and (min-width: $mediaMobilePortrait+1) and (max-width : $mediaMobileLandscape) { @content; }
	}
	@else if $media == tablet-portrait // tablet portrait
	{ 
		@media only screen and (min-width : $mediaMobileLandscape+1) and (max-width : $mediaTabletPortrait) { @content; }
	}
	@else if $media == tablet-landscape // tablet landscape
	{ 
		@media only screen and (min-width: $mediaTabletPortrait+1) and (max-width : $mediaTabletLandscape) { @content; }
	}
	@else if $media == desktop // desktop
	{ 
		@media only screen and (min-width: $mediaTabletLandscape) { @content; }
	}
}